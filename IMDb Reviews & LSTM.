import torch
import torch.nn as nn
import torchtext
from torchtext.datasets import IMDB
from torchtext.data.utils import get_tokenizer
from torchtext.vocab import build_vocab_from_iterator
from torch.nn.utils.rnn import pad_sequence
from torch.utils.data import DataLoader

# 1. Tokenizer and Vocab
tokenizer = get_tokenizer('basic_english')

def yield_tokens(data_iter):
    for label, line in data_iter:
        yield tokenizer(line)

train_iter = IMDB(split='train')
vocab = build_vocab_from_iterator(yield_tokens(train_iter), specials=["<unk>"])
vocab.set_default_index(vocab["<unk>"])

# 2. Pipeline
def text_pipeline(x):
    return vocab(tokenizer(x))

def label_pipeline(label):
    return 1 if label == 'pos' else 0

# 3. Collate function
def collate_batch(batch):
    label_list, text_list = [], []
    for label, text in batch:
        label_list.append(label_pipeline(label))
        text_list.append(torch.tensor(text_pipeline(text), dtype=torch.int64))
    text_list = pad_sequence(text_list, batch_first=True)
    return text_list, torch.tensor(label_list)

train_iter = IMDB(split='train')
train_dataloader = DataLoader(list(train_iter), batch_size=8, collate_fn=collate_batch)

# 4. Model
class LSTMClassifier(nn.Module):
    def __init__(self, vocab_size, embed_dim, hidden_dim):
        super().__init__()
        self.embedding = nn.Embedding(vocab_size, embed_dim)
        self.lstm = nn.LSTM(embed_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, text):
        embedded = self.embedding(text)
        output, (hidden, _) = self.lstm(embedded)
        return self.sigmoid(self.fc(hidden[-1])).squeeze()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = LSTMClassifier(len(vocab), 64, 128).to(device)
criterion = nn.BCELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# 5. Training Loop (1 epoch for demo)
for text_batch, label_batch in train_dataloader:
    text_batch, label_batch = text_batch.to(device), label_batch.float().to(device)
    optimizer.zero_grad()
    output = model(text_batch)
    loss = criterion(output, label_batch)
    loss.backward()
    optimizer.step()
    print(f"Batch Loss: {loss.item():.3f}")
