import numpy as np

# Define environment
n_states = 5
actions = [0, 1]  # 0 = left, 1 = right
q_table = np.zeros((n_states, len(actions)))

# Hyperparameters
alpha = 0.1
gamma = 0.9
epsilon = 0.1

# Training loop
for episode in range(1000):
    state = np.random.randint(0, n_states)
    done = False

    while not done:
        if np.random.uniform(0, 1) < epsilon:
            action = np.random.choice(actions)
        else:
            action = np.argmax(q_table[state])

        next_state = state + 1 if action == 1 else state - 1
        next_state = max(0, min(next_state, n_states - 1))

        reward = 1 if next_state == n_states - 1 else 0

        # Q-learning update
        q_table[state, action] = q_table[state, action] + alpha * (reward + gamma * np.max(q_table[next_state]) - q_table[state, action])

        state = next_state
        if state == n_states - 1:
            done = True

print("Q-table:\n", q_table)
